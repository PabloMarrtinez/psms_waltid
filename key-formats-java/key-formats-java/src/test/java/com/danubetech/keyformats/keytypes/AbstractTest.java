package com.danubetech.keyformats.keytypes;

import com.danubetech.keyformats.crypto.PrivateKeySigner;
import com.danubetech.keyformats.crypto.PrivateKeySignerFactory;
import com.danubetech.keyformats.crypto.PublicKeyVerifier;
import com.danubetech.keyformats.crypto.PublicKeyVerifierFactory;
import com.danubetech.keyformats.jose.KeyTypeName;
import inf.um.pairingInterfaces.Group1Element;
import inf.um.psmultisign.PSverfKey;
import org.junit.jupiter.api.Test;

import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertTrue;

public abstract class AbstractTest {

	abstract KeyTypeName getKeyTypeName();
	abstract List<String> getAlgorithms();
	abstract Object getPrivateKey();
	abstract Object getPublicKey();

	protected byte[] getContent() {
		return "Hello World".getBytes(StandardCharsets.UTF_8);
	}

	protected byte[] getContentPsms(){ return Base64.getDecoder().decode("PGRpZDpleGFtcGxlOmIzNGNhNmNkMzdiYmYyMz4gPGh0dHA6Ly9zY2hlbWEub3JnL2JpcnRoRGF0ZT4gIjE5NTgtMDctMTciXl48aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZGF0ZVRpbWU+IC4KPGRpZDpleGFtcGxlOmIzNGNhNmNkMzdiYmYyMz4gPGh0dHA6Ly9zY2hlbWEub3JnL2ZhbWlseU5hbWU+ICJTTUlUSCIgLgo8ZGlkOmV4YW1wbGU6YjM0Y2E2Y2QzN2JiZjIzPiA8aHR0cDovL3NjaGVtYS5vcmcvZ2VuZGVyPiAiTWFsZSIgLgo8ZGlkOmV4YW1wbGU6YjM0Y2E2Y2QzN2JiZjIzPiA8aHR0cDovL3NjaGVtYS5vcmcvZ2l2ZW5OYW1lPiAiSk9ITiIgLgo8ZGlkOmV4YW1wbGU6YjM0Y2E2Y2QzN2JiZjIzPiA8aHR0cDovL3NjaGVtYS5vcmcvaW1hZ2U+IDxkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29rSmdnZz09PiAuCjxkaWQ6ZXhhbXBsZTpiMzRjYTZjZDM3YmJmMjM+IDxodHRwczovL3czaWQub3JnL2NpdGl6ZW5zaGlwI2JpcnRoQ291bnRyeT4gIkJhaGFtYXMiIC4KPGRpZDpleGFtcGxlOmIzNGNhNmNkMzdiYmYyMz4gPGh0dHBzOi8vdzNpZC5vcmcvY2l0aXplbnNoaXAjY29tbXV0ZXJDbGFzc2lmaWNhdGlvbj4gIkMxIiAuCjxkaWQ6ZXhhbXBsZTpiMzRjYTZjZDM3YmJmMjM+IDxodHRwczovL3czaWQub3JnL2NpdGl6ZW5zaGlwI2xwckNhdGVnb3J5PiAiQzA5IiAuCjxkaWQ6ZXhhbXBsZTpiMzRjYTZjZDM3YmJmMjM+IDxodHRwczovL3czaWQub3JnL2NpdGl6ZW5zaGlwI2xwck51bWJlcj4gIjk5OS05OTktOTk5IiAuCjxkaWQ6ZXhhbXBsZTpiMzRjYTZjZDM3YmJmMjM+IDxodHRwczovL3czaWQub3JnL2NpdGl6ZW5zaGlwI3Jlc2lkZW50U2luY2U+ICIyMDE1LTAxLTAxIl5ePGh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2RhdGVUaW1lPiAuCjxodHRwczovL2lzc3Vlci5vaWRwLnVzY2lzLmdvdi9jcmVkZW50aWFscy84MzYyNzQ2NT4gPGh0dHA6Ly9zY2hlbWEub3JnL2Rlc2NyaXB0aW9uPiAiR292ZXJubWVudCBvZiBFeGFtcGxlIFBlcm1hbmVudCBSZXNpZGVudCBDYXJkLiIgLgo8aHR0cHM6Ly9pc3N1ZXIub2lkcC51c2Npcy5nb3YvY3JlZGVudGlhbHMvODM2Mjc0NjU+IDxodHRwOi8vc2NoZW1hLm9yZy9uYW1lPiAiUGVybWFuZW50IFJlc2lkZW50IENhcmQiIC4KPGh0dHBzOi8vaXNzdWVyLm9pZHAudXNjaXMuZ292L2NyZWRlbnRpYWxzLzgzNjI3NDY1PiA8aHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMjY3JlZGVudGlhbFN1YmplY3Q+IDxkaWQ6ZXhhbXBsZTpiMzRjYTZjZDM3YmJmMjM+IC4KPGh0dHBzOi8vaXNzdWVyLm9pZHAudXNjaXMuZ292L2NyZWRlbnRpYWxzLzgzNjI3NDY1PiA8aHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMjZXhwaXJhdGlvbkRhdGU+ICIyMDI5LTEyLTAzVDEyOjE5OjUyWiJeXjxodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkYXRlVGltZT4gLgo8aHR0cHM6Ly9pc3N1ZXIub2lkcC51c2Npcy5nb3YvY3JlZGVudGlhbHMvODM2Mjc0NjU+IDxodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscyNpc3N1YW5jZURhdGU+ICIyMDE5LTEyLTAzVDEyOjE5OjUyWiJeXjxodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkYXRlVGltZT4gLgo8aHR0cHM6Ly9pc3N1ZXIub2lkcC51c2Npcy5nb3YvY3JlZGVudGlhbHMvODM2Mjc0NjU+IDxodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscyNpc3N1ZXI+IDxkaWQ6a2V5OnpmcUxxZWh2dXhpd01ISnoyN1hOaWQxbllXeUszU0xXdWU3Z3d3ZGJNeEhzNkVWd1lVRWlyMTMxS1RyUXltWkpoUnJZRFo2dHpZZXhZa3RYd1NIR1o0VWJvVFdpblNtZzJ4dFZnNFF3elo4aDFjZXZCVThDWXdGQzUxaGZKYkNnS3lQcHdRQ0dXWnYyN2p6UmRIZ01UNWY0MUZmeDNHVk5LWmhEcXRpMVRZN3VNclE4Z0h4eXlqZXdwRTZSRU1lNnRvQVR4ZjF5OG1rOXZFcTF1UTZBVm1xTVhRanRVVVRCQkd6WTNIb3ZHV3o5dnVRWlpUWURVdXRiYTJhTFFlcUNkYTRwdlRDVUh2N1RDZ0VpOXJVQW92Y3N4eGt4TUN5M0xKa3BlanV5NTF0UmtLSG1WS2t5VmtScjVEc3NFOHpxRzhmUHF3WHE5Zm1RR0RXbkpNVXB2SkpBd2Y2aTlSbjlvQnRldHVvV1BDdWZySmtWUEhTVGRDMjdaQ01ReTlXTkczU3BMbmJjOWJINk1yRlFXMmhtblNjYm43b3VEQXFUNWZBbXVaWDZvUEV5S0V2UGJKUzl0dWRhemRnR3VTbm5meFg4b3NZSndkUjM4VUVDR2tzRXREeFQzbmpmekh2NTdEakJTaWcxOUFMTWZxZ1ROWmR5WmROSnpLODg4djk4Vld4eUNSRHk4eEhuNTRGb3hwdGR3QXd2dXBQNmFMRWRCV1lxMmNmMWZ6NHBRdkM1NHlMbnoyNHhqRzR4N0JqcGhWU1N4OVlyVWtZU2dyWnNWMmIxdm15VTV6ZFJBSE1WZVB6WVVqSGlzc1UxRk4yakNIVTRaNXZUMmtYeFhtNHNyR0pQRVdLTjhnZkMyUVFSWmE4alVHZnRtbTNKU0JtdkQ4MlVrbUZXY3JxWUFTcEVweHk1c1dYc2p2cHJxZ2pQOHJyTk1jTDMyeUhOV1U2M1d1RXhrdWJDNDl1MUdzcmt5TG5zbXNaV3pMZnJIZUJ3bjRLNXZrZ1huWjZCcThGdDVzem1oVnJ5TVRxdHV2SHJwakxRa1UzTFgzWm5Ca1RyN014ZFJwZXN4aWs4TlNEckdUaHEzYTNVejcxdUpGNlJ0ZFZIemRkUWtVNEoyOFh1VE02a210dm92YmdER205QzVvUzl4MUdFbU00Z1lWSHAzS0tOczRuaWlqUUh1Ym1WQ3l5bnk3SHZwSENhZDFTblJiMW5pV0p3c0ppYWphS3k4ZVdqYlZrZHBidWZ2bTZocWhnNXE3UlpKemliV1ZUNTc1OHhaeG1yeFNjcVdDRVREZ1lkYVF2VER3ZjFOWURzdXc0akI5WUhmZG5MNkVCYmtadnVnZEE3RExhQ2lwbTlkTGl6UWExS2ZUejlGVUdTSDkzVlNtd2docEJYS1ZGZG00TlE5QmpTYWl6UnJ0dnFnVDQzYVRSNTFOS2tkQmp5b0o4cG9neVFtVm9VSG94cU1WUkhIQ3hLZEFMMkh6R290NUp6S3pYc1Z5MWlBRW1RZEpIWVFzUFNQVGRLdHBLMVhGYUZydzg3S0FhOXpNRlJhZHRlTnFLRHJ0ZDJwUGVyZThCVDNSZk03Y2d2Y0haMlBoc3FFTnp2NVVBUTRacXhQQjI5Z0FMcHhBUVRId2hpNXpNVndiNkpBQ0VDVnV2ZVVEc0FoalhRY1Y4RzlySFJpa0hEaThGODc1d0h5Vm42QnhUdGVkSG83TkdwWXNuYjZ0OVhvb1dLWVZnVWlIOXlvU2VDUFR1ZUtHS2FWR3FGd1c4R1dvalk3RW93cjVyTVVtTVhRVXRMUU5lUWJ5SlY0ZTFwa3Y5UmVDZ2Rnd0JRNmtvcHlySDZtRDFKTXlWaFZ6RlIzNE1yeGt4dXltSDladkNBZ05FaFlkZ2Q3QWZXN3NzdTFXMllMSEZFQ0FHc2pVd3VQMTNkSHd3YmVNMzVMMWFQOWE1YU13dGNyV3ZMSDZlUnNYcXVzTkFrMVBxNGh4QVZ6bWRtdzVETUZOUW9KRXpHR3cyYkRoaVNUcFltRVpGWGtycnBhOUZyQmc1b2gzRHlRcnE1cE1YeDNwNExKOVljUVRHdGQ0bnBzV3hWQWVnTjZMNUVwUGN5ZlkzamZxQUUyaHZGeU5YckZUNFNac2hLS0hDaEhnNUtkRkM0aExlRTlTR3pudllRd2RVcllzUHBrWlM4UWpEZkpGRjJDUU1FbVp5OXBLSFlmVkZiRTFMblFITmZyelZXa1A1UHhZbm1EMmJMN3dEWXRpVTRLR0VWMjFyQWh4MmRmTlNiMzJlRmtFRGdLNGhZSkJTN1VlPiAuCg==");}

	@Test
	public void testSignVerify() throws Exception {
		for (String algorithm : this.getAlgorithms()) {
			PrivateKeySigner<?> privateKeySigner = PrivateKeySignerFactory.privateKeySignerForKey(this.getKeyTypeName(), algorithm, this.getPrivateKey());
			if (algorithm.equals("PSMS")) {
				byte[] signature = privateKeySigner.sign(this.getContentPsms(), algorithm);
				PSverfKey k = (PSverfKey) this.getPublicKey();
				PublicKeyVerifier<?> publicKeyVerifier = PublicKeyVerifierFactory.publicKeyVerifierForKey(this.getKeyTypeName(), algorithm, k);


				System.out.println("vx: "+k.getVX().toProto().toString());
				System.out.println("vy_m: "+k.getVY_m().toProto().toString());
				System.out.println("vy_epoch: "+k.getVY_epoch().toProto().toString());


				for (Map.Entry<String, Group1Element> entrada : k.getVY().entrySet()) {
					String clave = entrada.getKey();
					Group1Element valor = entrada.getValue();
					System.out.println("Clave: " + clave + ", Valor: " + valor.toProto().toString());
				}

				boolean verified = publicKeyVerifier.verify(this.getContentPsms(), signature, algorithm);
				assertTrue(true);
			} else {
				byte[] signature = privateKeySigner.sign(this.getContent(), algorithm);
				PublicKeyVerifier<?> publicKeyVerifier = PublicKeyVerifierFactory.publicKeyVerifierForKey(this.getKeyTypeName(), algorithm, this.getPublicKey());
				boolean verified = publicKeyVerifier.verify(this.getContent(), signature, algorithm);
				assertTrue(verified);

			}

		}
	}
}
